# See docs/devel/tracing.txt for syntax documentation.

# balloon.c
# Since requests are raised via monitor, not many tracepoints are needed.
balloon_event(void *opaque, unsigned long addr) "opaque %p addr %lu"

# ioport.c
cpu_in(unsigned int addr, char size, unsigned int val) "addr 0x%x(%c) value %u"
cpu_out(unsigned int addr, char size, unsigned int val) "addr 0x%x(%c) value %u"

# memory.c
memory_region_ops_read(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr 0x%"PRIx64" value 0x%"PRIx64" size %u"
memory_region_ops_write(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr 0x%"PRIx64" value 0x%"PRIx64" size %u"
memory_region_subpage_read(int cpu_index, void *mr, uint64_t offset, uint64_t value, unsigned size) "cpu %d mr %p offset 0x%"PRIx64" value 0x%"PRIx64" size %u"
memory_region_subpage_write(int cpu_index, void *mr, uint64_t offset, uint64_t value, unsigned size) "cpu %d mr %p offset 0x%"PRIx64" value 0x%"PRIx64" size %u"
memory_region_ram_device_read(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr 0x%"PRIx64" value 0x%"PRIx64" size %u"
memory_region_ram_device_write(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr 0x%"PRIx64" value 0x%"PRIx64" size %u"
flatview_new(void *view, void *root) "%p (root %p)"
flatview_destroy(void *view, void *root) "%p (root %p)"
flatview_destroy_rcu(void *view, void *root) "%p (root %p)"

# vl.c
vm_state_notify(int running, int reason, const char *reason_str) "running %d reason %d (%s)"
load_file(const char *name, const char *path) "name %s location %s"
runstate_set(int current_state, const char *current_state_str, int new_state, const char *new_state_str) "current_run_state %d (%s) new_state %d (%s)"
system_wakeup_request(int reason) "reason=%d"
qemu_system_shutdown_request(int reason) "reason=%d"
qemu_system_powerdown_request(void) ""

softmmu_vlC_qmp_x_exit_preconfig_0_dgtrace();
softmmu_vlC_qmp_x_exit_preconfig_1_dgtrace();
softmmu_vlC_qmp_x_exit_preconfig_2_dgtrace();
softmmu_vlC_qmp_x_exit_preconfig_3_dgtrace();
softmmu_vlC_qmp_x_exit_preconfig_4_dgtrace();
softmmu_vlC_qmp_x_exit_preconfig_5_dgtrace();
softmmu_vlC_qmp_x_exit_preconfig_6_dgtrace();
softmmu_vlC_qmp_x_exit_preconfig_999_dgtrace();

softmmu_vlC_qemu_init_0_dgtrace(void) ""
softmmu_vlC_qemu_init_1_dgtrace(void) ""
softmmu_vlC_qemu_init_2_dgtrace(void) ""
softmmu_vlC_qemu_init_3_dgtrace(void) ""
softmmu_vlC_qemu_init_999_dgtrace(void) ""

softmmu_vlC_qemu_create_cli_devices_0_dgtrace();
softmmu_vlC_qemu_create_cli_devices_1_dgtrace();
softmmu_vlC_qemu_create_cli_devices_2_dgtrace();
softmmu_vlC_qemu_create_cli_devices_3_dgtrace();
softmmu_vlC_qemu_create_cli_devices_4_dgtrace();
softmmu_vlC_qemu_create_cli_devices_5_dgtrace();
softmmu_vlC_qemu_create_cli_devices_6_dgtrace();
softmmu_vlC_qemu_create_cli_devices_7_dgtrace();
softmmu_vlC_qemu_create_cli_devices_999_dgtrace();

softmmu_vlC_usb_device_add_0_dgtrace(const char *devname) "devname %s"
softmmu_vlC_usb_device_add_1_dgtrace(void) ""
softmmu_vlC_usb_device_add_999_dgtrace(void) "" 
softmmu_vlC_usb_parse_0_dgtrace(const char *cmdline) "cmdline %s"
softmmu_vlC_usb_parse_999_dgtrace(void) "" 
